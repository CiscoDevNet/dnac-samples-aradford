{
    "basePath": "/policy-manager-service",
    "swaggerVersion": "1.2",
    "models": {
        "FlowListResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "type": "array",
                    "items": {
                        "$ref": "FlowDTO"
                    }
                }
            },
            "id": "FlowListResult",
            "description": ""
        },
        "VersionDiffResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "$ref": "VersionDiffDTO"
                }
            },
            "id": "VersionDiffResult",
            "description": ""
        },
        "PolicyConsumerProducerApplication": {
            "extends": "",
            "properties": {
                "consumerApplication": {
                    "$ref": "PolicyApplication"
                },
                "producerApplication": {
                    "$ref": "PolicyApplication"
                }
            },
            "id": "PolicyConsumerProducerApplication",
            "description": ""
        },
        "FlowDTO": {
            "extends": "",
            "properties": {
                "applicationName": {
                    "type": "string",
                    "description": "APIC-EM application name"
                },
                "destPort": {
                    "type": "string",
                    "description": "destPort"
                },
                "status": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string",
                    "description": "protocol"
                },
                "id": {
                    "type": "string",
                    "description": "id"
                },
                "networkDeviceName": {
                    "type": "string",
                    "description": "networkDeviceName"
                },
                "peakBandwidth": {
                    "type": "string",
                    "description": "peakBandwidth in kbps (min: 0, max: 2147483647 kbps)"
                },
                "destIP": {
                    "type": "string",
                    "description": "destIP"
                },
                "sourceIP": {
                    "type": "string",
                    "description": "sourceIP"
                },
                "matchDSCP": {
                    "type": "string",
                    "description": "DSCP of the flow"
                },
                "clientReference": {
                    "type": "string",
                    "description": "clientReference (can be used by the client as a reference to this resource"
                },
                "networkDeviceId": {
                    "type": "string",
                    "description": "networkDeviceId"
                },
                "interfaceId": {
                    "type": "string",
                    "description": "interfaceId"
                },
                "codec": {
                    "type": "string",
                    "description": "codec"
                },
                "sourcePort": {
                    "type": "string",
                    "description": "sourcePort"
                },
                "flowType": {
                    "type": "string",
                    "description": "flowType"
                },
                "interfaceName": {
                    "type": "string",
                    "description": "interfaceName"
                },
                "averageBandwidth": {
                    "type": "string",
                    "description": "averageBandwidth in kbps (min: 0, max: 2147483647 kbps)"
                },
                "failureReason": {
                    "type": "string"
                },
                "detailedFlowType": {
                    "type": "string",
                    "description": "detailedFlowType (more detailed classification than flowType)"
                }
            },
            "required": [
                "flowType",
                "sourceIP"
            ],
            "id": "FlowDTO",
            "description": ""
        },
        "PolicyTagAssociationDeviceDTO": {
            "extends": "",
            "properties": {
                "deviceIp": {
                    "type": "string"
                },
                "unAssigned": {
                    "type": "boolean"
                },
                "deviceId": {
                    "type": "string"
                },
                "deviceName": {
                    "type": "string"
                },
                "restricted": {
                    "type": "boolean"
                },
                "deviceRole": {
                    "type": "string"
                },
                "deviceType": {
                    "type": "string"
                },
                "restrictedReason": {
                    "type": "string"
                }
            },
            "id": "PolicyTagAssociationDeviceDTO",
            "description": ""
        },
        "PolicyTagListResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyTagDTO"
                    }
                }
            },
            "id": "PolicyTagListResult",
            "description": ""
        },
        "PolicyTagDTO": {
            "extends": "",
            "properties": {
                "policyTag": {
                    "type": "string",
                    "description": "Policy Tag value"
                }
            },
            "required": [
                "policyTag"
            ],
            "id": "PolicyTagDTO",
            "description": ""
        },
        "TaskIdResponse": {
            "extends": "",
            "properties": {
                "taskId": {
                    "$ref": "TaskId"
                },
                "url": {
                    "type": "string"
                }
            },
            "id": "TaskIdResponse",
            "description": ""
        },
        "PolicyFlowSettingDTO": {
            "extends": "",
            "properties": {
                "flowPolicyEnabled": {
                    "type": "boolean",
                    "description": "Allowed values are true, false"
                }
            },
            "required": [
                "flowPolicyEnabled"
            ],
            "id": "PolicyFlowSettingDTO",
            "description": ""
        },
        "CountResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "type": "integer",
                    "format": "int32"
                }
            },
            "id": "CountResult",
            "description": ""
        },
        "Policy": {
            "extends": "",
            "properties": {
                "policyName": {
                    "type": "string",
                    "description": "name of the policy"
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true,
                    "description": "Action Set"
                },
                "instanceUuid": {
                    "type": "string",
                    "description": ""
                },
                "policyScope": {
                    "type": "string",
                    "description": "policyScope"
                },
                "id": {
                    "type": "string",
                    "description": "id"
                },
                "resource": {
                    "$ref": "PolicyResource",
                    "description": "Resource"
                },
                "taskId": {
                    "type": "string",
                    "description": "Task ID"
                },
                "scopeWirelessSegment": {
                    "type": "string"
                },
                "policyOwner": {
                    "type": "string",
                    "description": "Policy Owner"
                },
                "policyPriority": {
                    "type": "integer",
                    "description": "Policy Priority",
                    "format": "int32"
                },
                "networkUser": {
                    "$ref": "NetworkUser",
                    "description": "Network User"
                },
                "actionProperty": {
                    "$ref": "ActionProperty",
                    "description": "ActionProperty"
                },
                "state": {
                    "type": "string"
                }
            },
            "required": [
                "policyScope",
                "actionProperty",
                "actions",
                "networkUser",
                "policyOwner",
                "resource",
                "id",
                "taskId",
                "policyName",
                "policyPriority"
            ],
            "id": "Policy",
            "description": ""
        },
        "TaskId": {
            "extends": "",
            "properties": {},
            "id": "TaskId",
            "description": ""
        },
        "PolicyTagAssociationListResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyTagAssociationDTO"
                    }
                }
            },
            "id": "PolicyTagAssociationListResult",
            "description": ""
        },
        "PolicyIntentSummaryDTO": {
            "extends": "",
            "properties": {
                "latestPolicyVersion": {
                    "type": "integer",
                    "description": "Latest version of the policy",
                    "format": "int64"
                },
                "allPoliciesDeleted": {
                    "type": "boolean",
                    "description": "Flag to indicate if all policies are deleted in the policy scope"
                },
                "lastUpdateTime": {
                    "type": "integer",
                    "description": "Last update time of the policy",
                    "format": "int64"
                },
                "numberOfDevices": {
                    "type": "integer",
                    "description": "The number of devices in the policy scope",
                    "format": "int64"
                },
                "applicationsStale": {
                    "type": "boolean",
                    "description": "Flag to indicate if applications are stale in the policy"
                },
                "policyScope": {
                    "type": "string",
                    "description": "Scope of the policy"
                },
                "serviceProviderProfileStale": {
                    "type": "boolean",
                    "description": "Flag to indicate if Service Provider Profiles are stale in the policy scope"
                },
                "scopeWirelessSegment": {
                    "type": "string",
                    "description": "Wireless segment of the policy"
                },
                "numberOfAssignedApplications": {
                    "type": "integer",
                    "description": "The number of assigned applications in the policy",
                    "format": "int64"
                },
                "operations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The operations in that version. (policy-add, policy-update, policy-delete)"
                },
                "bandwidthProfileStale": {
                    "type": "boolean",
                    "description": "Flag to indicate if Bandwidth Profile associated with the policy is stale"
                }
            },
            "required": [
                "numberOfDevices",
                "applicationsStale",
                "allPoliciesDeleted",
                "serviceProviderProfileStale",
                "bandwidthProfileStale",
                "operations",
                "lastUpdateTime",
                "policyScope",
                "numberOfAssignedApplications",
                "latestPolicyVersion"
            ],
            "id": "PolicyIntentSummaryDTO",
            "description": ""
        },
        "PolicyApplicationDiffDTO": {
            "extends": "",
            "properties": {
                "policyApplication": {
                    "$ref": "PolicyApplication",
                    "description": "application"
                },
                "operation": {
                    "type": "string",
                    "enum": [
                        "CREATE",
                        "UPDATE",
                        "DELETE"
                    ],
                    "description": "operation"
                }
            },
            "id": "PolicyApplicationDiffDTO",
            "description": ""
        },
        "PolicyApplicationListResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyApplication"
                    }
                }
            },
            "id": "PolicyApplicationListResult",
            "description": ""
        },
        "CategoryDTO": {
            "extends": "",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Category Name"
                },
                "id": {
                    "type": "string",
                    "description": "id"
                }
            },
            "required": [
                "name",
                "id"
            ],
            "id": "CategoryDTO",
            "description": ""
        },
        "PolicyListResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "type": "array",
                    "items": {
                        "$ref": "Policy"
                    }
                }
            },
            "id": "PolicyListResult",
            "description": ""
        },
        "PolicyResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "$ref": "Policy"
                }
            },
            "id": "PolicyResult",
            "description": ""
        },
        "PolicyApplication": {
            "extends": "",
            "properties": {
                "appName": {
                    "type": "string"
                },
                "trafficClass": {
                    "type": "string",
                    "description": "Traffic class to which the app belongs"
                },
                "stale": {
                    "type": "boolean",
                    "description": "Indicates whether the application has been updated since the last time this policy was provisioned"
                },
                "id": {
                    "type": "string",
                    "description": "id"
                },
                "raw": {
                    "type": "string",
                    "description": "Either raw Application of the form port:protocol should be specified or appId should be specified"
                }
            },
            "required": [
                "trafficClass",
                "id"
            ],
            "id": "PolicyApplication",
            "description": ""
        },
        "FlowResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "$ref": "FlowDTO"
                }
            },
            "id": "FlowResult",
            "description": ""
        },
        "PolicyVersionNumberListResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "type": "array",
                    "items": {
                        "$ref": "VersionNumberDTO"
                    }
                }
            },
            "id": "PolicyVersionNumberListResult",
            "description": ""
        },
        "FlowIdResponse": {
            "extends": "",
            "properties": {
                "taskId": {
                    "type": "string"
                },
                "flowId": {
                    "type": "string"
                }
            },
            "id": "FlowIdResponse",
            "description": ""
        },
        "VersionDiffDTO": {
            "extends": "",
            "properties": {
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyDiffDTO"
                    },
                    "description": "Policies from the cached diff. This attribute enables the user to make changes to the diffs that he can post for rollback."
                },
                "id": {
                    "type": "string",
                    "description": "Id of the cached diff. Use id in the post api if you don't want to make any modifications to the diff corresponding to the diff id."
                }
            },
            "id": "VersionDiffDTO",
            "description": ""
        },
        "PolicyResource": {
            "extends": "",
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyApplication"
                    },
                    "uniqueItems": true
                },
                "applicationDiffs": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyApplicationDiffDTO"
                    },
                    "uniqueItems": true
                },
                "userIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "trafficClasses": {
                    "type": "string",
                    "description": "Traffic classes to set the bandwidth profile for. If the ActionProperty is BandwidthProfileId, this resource should be 'ALL_TRAFFIC_CLASSES'. Otherwise, it should be null."
                },
                "deviceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "CategoryDTO"
                    },
                    "uniqueItems": true
                }
            },
            "id": "PolicyResource",
            "description": ""
        },
        "TaskIdResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "$ref": "TaskIdResponse"
                }
            },
            "id": "TaskIdResult",
            "description": ""
        },
        "PolicyStatusDTO": {
            "extends": "",
            "properties": {
                "businessIrrelevantConsumerProducerApplications": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyConsumerProducerApplication"
                    }
                },
                "policyVersion": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "policyScope": {
                    "type": "string"
                },
                "pending": {
                    "type": "boolean"
                },
                "businessIrrelevantApplications": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyApplication"
                    }
                },
                "outOfScope": {
                    "type": "boolean"
                },
                "scopeWirelessSegment": {
                    "type": "string"
                },
                "networkDeviceId": {
                    "type": "string"
                },
                "businessRelevantApplications": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyApplication"
                    }
                },
                "networkDeviceName": {
                    "type": "string"
                },
                "instanceUuid": {
                    "type": "string"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "businessRelevantConsumerProducerApplications": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyConsumerProducerApplication"
                    }
                },
                "networkDeviceIp": {
                    "type": "string"
                },
                "applicationPolicyCount": {
                    "type": "integer",
                    "format": "int32"
                },
                "lastSuccessfulPolicyVersion": {
                    "type": "string"
                },
                "failureReason": {
                    "type": "string"
                }
            },
            "id": "PolicyStatusDTO",
            "description": ""
        },
        "PolicyIntentSummaryDTOResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyIntentSummaryDTO"
                    }
                }
            },
            "id": "PolicyIntentSummaryDTOResult",
            "description": ""
        },
        "NetworkUser": {
            "extends": "",
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyApplication"
                    },
                    "uniqueItems": true
                },
                "applicationDiffs": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyApplicationDiffDTO"
                    },
                    "uniqueItems": true
                },
                "userIdentifiers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "deviceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "CategoryDTO"
                    },
                    "uniqueItems": true
                }
            },
            "id": "NetworkUser",
            "description": ""
        },
        "ActionProperty": {
            "extends": "",
            "properties": {
                "PrimaryPathPref": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "SecondaryPathPref": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bandwidthProfileId": {
                    "type": "string",
                    "description": "ID of the bandwidth profile"
                },
                "pathControlFlag": {
                    "type": "boolean",
                    "description": "path control flag"
                },
                "priorityLevel": {
                    "type": "string",
                    "description": "priority level for a policy"
                },
                "PathOfLastResort": {
                    "type": "string"
                },
                "pathPreference": {
                    "type": "string",
                    "description": "path preference for a policy"
                },
                "experienceLevel": {
                    "type": "string",
                    "description": "experience level for a policy"
                },
                "relevanceLevel": {
                    "type": "string",
                    "description": "relevance level for a policy"
                },
                "pathPreferenceFlag": {
                    "type": "boolean",
                    "description": "path preference flag"
                },
                "trustLevel": {
                    "type": "string",
                    "description": "trust level for a policy"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "maintainExperience": {
                    "type": "string"
                },
                "TertiaryPathPref": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "bandwidthProfileId",
                "priorityLevel",
                "experienceLevel",
                "pathPreference",
                "trustLevel",
                "pathControlFlag",
                "pathPreferenceFlag",
                "relevanceLevel"
            ],
            "id": "ActionProperty",
            "description": ""
        },
        "PolicyFlowSettingResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "$ref": "PolicyFlowSettingDTO"
                }
            },
            "id": "PolicyFlowSettingResult",
            "description": ""
        },
        "ScheduledPolicyListResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "type": "array",
                    "items": {
                        "$ref": "ScheduledPolicyDTO"
                    }
                }
            },
            "id": "ScheduledPolicyListResult",
            "description": ""
        },
        "PolicyDiffDTO": {
            "extends": "",
            "properties": {
                "policy": {
                    "$ref": "Policy",
                    "description": "policy"
                },
                "changeList": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "changeList"
                },
                "operation": {
                    "type": "string",
                    "enum": [
                        "CREATE",
                        "UPDATE",
                        "DELETE"
                    ],
                    "description": "operation"
                }
            },
            "id": "PolicyDiffDTO",
            "description": ""
        },
        "VersionNumberDTO": {
            "extends": "",
            "properties": {
                "createTime": {
                    "type": "integer",
                    "description": "time at which the version was created",
                    "format": "int64"
                },
                "policyChanged": {
                    "type": "boolean",
                    "description": "true if the version was created as a result of put/post/delete on the policy"
                },
                "version": {
                    "type": "integer",
                    "description": "version number",
                    "format": "int64"
                }
            },
            "id": "VersionNumberDTO",
            "description": ""
        },
        "PolicyStatusListResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyStatusDTO"
                    }
                }
            },
            "id": "PolicyStatusListResult",
            "description": ""
        },
        "PolicyTagAssociationDTO": {
            "extends": "",
            "properties": {
                "unModifiableReason": {
                    "type": "string"
                },
                "networkDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyTagAssociationDeviceDTO"
                    }
                },
                "unModifiable": {
                    "type": "boolean"
                },
                "policyTag": {
                    "type": "string"
                }
            },
            "id": "PolicyTagAssociationDTO",
            "description": ""
        },
        "PolicyTagAssociationDeviceListResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "type": "array",
                    "items": {
                        "$ref": "PolicyTagAssociationDeviceDTO"
                    }
                }
            },
            "id": "PolicyTagAssociationDeviceListResult",
            "description": ""
        },
        "FlowIdResult": {
            "extends": "",
            "properties": {
                "version": {
                    "type": "string"
                },
                "response": {
                    "$ref": "FlowIdResponse"
                }
            },
            "id": "FlowIdResult",
            "description": ""
        },
        "ScheduledPolicyDTO": {
            "extends": "",
            "properties": {
                "scheduledWorkSpecificationId": {
                    "type": "string",
                    "description": "scheduledWorkSpecificationId"
                },
                "policy": {
                    "$ref": "Policy",
                    "description": "policy"
                },
                "scheduleTime": {
                    "type": "string",
                    "description": "scheduleTime"
                }
            },
            "required": [
                "policy",
                "scheduleTime"
            ],
            "id": "ScheduledPolicyDTO",
            "description": ""
        }
    },
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "path": "/policy",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "Delete policies based on a given filter",
                    "nickname": "deleteFilterPolicies",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "DELETE",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Delete policies based on a given filter",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Delete policies for a given scope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scopeWirelessSegment",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Delete policies for a given wireless segment, within a policyScope (policyScope is mandatory for this)",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "deleteFilterPolicies"
        },
        {
            "path": "/policy",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "Update a policy",
                    "nickname": "update",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "PUT",
                    "consumes": [
                        "application/json"
                    ],
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Update policy(s)",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "scheduleAt",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the policy should be scheduled (Optional) ",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scheduleDesc",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Custom Description (Optional)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scheduleOrigin",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Originator of this call (Optional)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "array",
                            "name": "policyList",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Policy Object",
                            "items": {
                                "$ref": "Policy"
                            },
                            "defaultValue": "",
                            "paramType": "body"
                        }
                    ]
                }
            ],
            "description": "update"
        },
        {
            "path": "/policy",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "Create a policy",
                    "nickname": "add",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.",
                            "code": 201
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The request was accepted for processing, but the processing has not been completed.",
                            "code": 202
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "POST",
                    "consumes": [
                        "application/json"
                    ],
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Create policy(s)",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "scheduleAt",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the policy should be scheduled (Optional) ",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scheduleDesc",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Custom Description (Optional)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scheduleOrigin",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Originator of this call (Optional)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "array",
                            "name": "policyList",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Policy Object",
                            "items": {
                                "$ref": "Policy"
                            },
                            "defaultValue": "",
                            "paramType": "body"
                        }
                    ]
                }
            ],
            "description": "add"
        },
        {
            "path": "/policy",
            "operations": [
                {
                    "type": "PolicyListResult",
                    "notes": "Get policy(s) based on a filter provided",
                    "nickname": "getFilterPolicies",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "PolicyListResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves policies based on a given filter",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve policies for a given scope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scopeWirelessSegment",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve policies for a given wireless segment, within a policyScope (policyScope is mandatory for this)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "applicationId",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve policies for a given Resource Application Id",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "offset",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Starting index of the resources (1 based)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "limit",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Number of resources to return",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getFilterPolicies"
        },
        {
            "path": "/policy/count",
            "operations": [
                {
                    "type": "CountResult",
                    "notes": "Get total count of policies",
                    "nickname": "getCount",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "CountResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Return total count of policies",
                    "parameters": []
                }
            ],
            "description": "getCount"
        },
        {
            "path": "/policy/diff",
            "operations": [
                {
                    "type": "VersionDiffResult",
                    "notes": "This will return the list of policies diffs for a given version and scope. Each element will be a wrapper on existing policy type and existing application type. The policy wrapper in addition to policy will have an operation enum (CREATE, UPDATE, DELETE). CREATE means the policy existed on the selected version but does not exist in the current version. DELETE means the policy did not exist in the selected version but exists in the current version. UPDATE means the policy exists in both versions. Application wrapper has the same semantics for CREATE, UPDATE, DELETE",
                    "nickname": "getPolicyDiff",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "VersionDiffResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves the policy diff",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "version",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Retrieve policy diffs for the given version",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Retrieve policy diffs for the given scope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scopeWirelessSegment",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve policy diffs for the given scopeWirelessSegment",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getPolicyDiff"
        },
        {
            "path": "/policy/diff",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "The body of the request will contain a list of policy wrappers as obtained by the GET /policy/diff api for a given version. This request will create and apply a new version of the policies. Id and policies in VersionDiffDTO are optional params. But one of them have to be specified. If policies is specified id is ignored.",
                    "nickname": "addPolicyDiff",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.",
                            "code": 201
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The request was accepted for processing, but the processing has not been completed.",
                            "code": 202
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "POST",
                    "consumes": [
                        "application/json"
                    ],
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Adds the policy diff",
                    "parameters": [
                        {
                            "type": "VersionDiffDTO",
                            "name": "versionDiffDTO",
                            "allowMultiple": false,
                            "required": true,
                            "description": "VersionDiff",
                            "defaultValue": "",
                            "paramType": "body"
                        }
                    ]
                }
            ],
            "description": "addPolicyDiff"
        },
        {
            "path": "/policy/flow",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "deleteFlowsByClientReference",
                    "nickname": "deleteFlowsByClientReference",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "DELETE",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Deletes flows based on clientReference prefix",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "clientReference",
                            "allowMultiple": false,
                            "required": true,
                            "description": "clientReference",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "deleteFlowsByClientReference"
        },
        {
            "path": "/policy/flow",
            "operations": [
                {
                    "type": "FlowListResult",
                    "notes": "getFlows",
                    "nickname": "getFlows",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "FlowListResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves flows with search criteria",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "offset",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Starting index of the resources (1 based)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "limit",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Number of resources to return",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getFlows"
        },
        {
            "path": "/policy/flow",
            "operations": [
                {
                    "type": "FlowIdResult",
                    "notes": "addFlow",
                    "nickname": "addFlow",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.",
                            "code": 201
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "FlowIdResult"
                        },
                        {
                            "message": "The request was accepted for processing, but the processing has not been completed.",
                            "code": 202
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "POST",
                    "consumes": [
                        "application/json"
                    ],
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Creates a new traffic flow for which qos policies will be applied",
                    "parameters": [
                        {
                            "type": "FlowDTO",
                            "name": "flowDTO",
                            "allowMultiple": false,
                            "required": false,
                            "description": "flowDTO",
                            "defaultValue": "",
                            "paramType": "body"
                        }
                    ]
                }
            ],
            "description": "addFlow"
        },
        {
            "path": "/policy/flow/count",
            "operations": [
                {
                    "type": "CountResult",
                    "notes": "getFlowCount",
                    "nickname": "getFlowCount",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "CountResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves the number of flows",
                    "parameters": []
                }
            ],
            "description": "getFlowCount"
        },
        {
            "path": "/policy/flow/setting",
            "operations": [
                {
                    "type": "PolicyFlowSettingResult",
                    "notes": "getPolicyFlowSetting",
                    "nickname": "getPolicyFlowSetting",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "PolicyFlowSettingResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves dynamic policy flow setting",
                    "parameters": []
                }
            ],
            "description": "getPolicyFlowSetting"
        },
        {
            "path": "/policy/flow/setting",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "updateFlowPolicySetting",
                    "nickname": "updateFlowPolicySetting",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "PUT",
                    "consumes": [
                        "application/json"
                    ],
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Update the dynamic policy flow setting. This setting will be used to allow/disallow dynamic flows /policy/flow requests.",
                    "parameters": [
                        {
                            "type": "PolicyFlowSettingDTO",
                            "name": "policyFlowSettingDTO",
                            "allowMultiple": false,
                            "required": false,
                            "description": "policyFlowSettingDTO",
                            "defaultValue": "",
                            "paramType": "body"
                        }
                    ]
                }
            ],
            "description": "updateFlowPolicySetting"
        },
        {
            "path": "/policy/flow/{id}",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "Delete a policy for the flow by its id",
                    "nickname": "deleteFlow",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "DELETE",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Delete a policy for the flow by its id",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "id",
                            "allowMultiple": false,
                            "required": true,
                            "description": "id",
                            "defaultValue": "",
                            "paramType": "path"
                        }
                    ]
                }
            ],
            "description": "deleteFlow"
        },
        {
            "path": "/policy/flow/{id}",
            "operations": [
                {
                    "type": "FlowResult",
                    "notes": "getFlow",
                    "nickname": "getFlow",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "FlowResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves a flow by its id",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "id",
                            "allowMultiple": false,
                            "required": true,
                            "description": "id",
                            "defaultValue": "",
                            "paramType": "path"
                        }
                    ]
                }
            ],
            "description": "getFlow"
        },
        {
            "path": "/policy/intent/summary",
            "operations": [
                {
                    "type": "PolicyIntentSummaryDTOResult",
                    "notes": "Get the policy intent summary based on a given filter",
                    "nickname": "getPolicyIntentSummary",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "PolicyIntentSummaryDTOResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves the policy intent summary based on a given filter",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve the policy intent summary based on a given policyScope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scopeWirelessSegment",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve the policy intent summary based on a given scopeWirelessSegment given the policyScope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "offset",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Starting index of the resources (1 based)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "limit",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Number of resources to return",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getPolicyIntentSummary"
        },
        {
            "path": "/policy/intent/summary/application/assigned",
            "operations": [
                {
                    "type": "PolicyApplicationListResult",
                    "notes": "Get applications(s) based on a filter provided",
                    "nickname": "getAssignedPolicyApplications",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "PolicyApplicationListResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves Assigned applications that are (or aren't) stale in policies for a given policyScope & scopeWirelessSegment based on a given filter",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Retrieve policies for a given policyScope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scopeWirelessSegment",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve policies for a given wireless segment, within a policyScope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "stale",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Indicates whether the retrieved applications have/have not been updated since the last time the policy was provisioned. If unspecified, both will be returned",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getAssignedPolicyApplications"
        },
        {
            "path": "/policy/intent/summary/application/unassigned",
            "operations": [
                {
                    "type": "PolicyApplicationListResult",
                    "notes": "Get applications(s) based on a filter provided",
                    "nickname": "getUnassignedPolicyApplications",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "PolicyApplicationListResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves Unassigned applications for a given policyScope & scopeWirelessSegment",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Retrieve policies for a given policyScope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scopeWirelessSegment",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve policies for a given wireless segment, within a policyScope",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getUnassignedPolicyApplications"
        },
        {
            "path": "/policy/schedule",
            "operations": [
                {
                    "type": "ScheduledPolicyListResult",
                    "notes": "Get scheduled policies",
                    "nickname": "getScheduledPolicies",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "ScheduledPolicyListResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves scheduled policies",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve scheduled policies for a given scope",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getScheduledPolicies"
        },
        {
            "path": "/policy/status",
            "operations": [
                {
                    "type": "PolicyStatusListResult",
                    "notes": "Get policy status(s) based on filter(s) provided. Either provide networkDeviceId or provide policyScope, offset, limit",
                    "nickname": "getPolicyStatus",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "PolicyStatusListResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves policy statuses based on a given filter",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "networkDeviceId",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve policies for a given networkDeviceId",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve policies for a given scope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scopeWirelessSegment",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve policies for a given wirelessSegment within a policyScope (policyScope is mandatory for this)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "offset",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Starting index of the resources (1 based)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "limit",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Number of resources to return (Use smaller limit value for better response times. Max 50)",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getPolicyStatus"
        },
        {
            "path": "/policy/status/count",
            "operations": [
                {
                    "type": "CountResult",
                    "notes": "Get count of policy status(es) based on a given policyScope & scopeWirelessSegment",
                    "nickname": "getCountByPolicyScope",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "CountResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves count of policy status(es) based on a given policyScope & scopeWirelessSegment",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Retrieve count of policy status(es) based on a given policyScope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scopeWirelessSegment",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve count of policy status(es) based on a given scopeWirelessSegment",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getCountByPolicyScope"
        },
        {
            "path": "/policy/status/summary",
            "operations": [
                {
                    "type": "PolicyStatusListResult",
                    "notes": "Get policy status(s) summary based on a filter provided",
                    "nickname": "getPolicyStatusSummary",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "PolicyStatusListResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves policy statuses summary based on a given filter",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Retrieve policy status(es) for a given scope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "offset",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Starting index of the resources (1 based)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "limit",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Number of resources to return (Max 500)",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getPolicyStatusSummary"
        },
        {
            "path": "/policy/tag",
            "operations": [
                {
                    "type": "PolicyTagListResult",
                    "notes": "getPolicyTags",
                    "nickname": "getPolicyTags",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "PolicyTagListResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves policy tags",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyTag",
                            "allowMultiple": false,
                            "required": false,
                            "description": "policyTag search substring",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "filterOperation",
                            "allowMultiple": false,
                            "required": false,
                            "description": "type of search (startsWith, endsWith, contains",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getPolicyTags"
        },
        {
            "path": "/policy/tag",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "deletePolicyTag",
                    "nickname": "deletePolicyTag",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "DELETE",
                    "consumes": [
                        "application/json"
                    ],
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Delete a policy tag.",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyTag",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Policy Tag",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "deletePolicyTag"
        },
        {
            "path": "/policy/tag",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "addPolicyTag",
                    "nickname": "addPolicyTag",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.",
                            "code": 201
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The request was accepted for processing, but the processing has not been completed.",
                            "code": 202
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "POST",
                    "consumes": [
                        "application/json"
                    ],
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Create a policy tag",
                    "parameters": [
                        {
                            "type": "PolicyTagDTO",
                            "name": "policyTagDTO",
                            "allowMultiple": false,
                            "required": false,
                            "description": "policyTagDTO",
                            "defaultValue": "",
                            "paramType": "body"
                        }
                    ]
                }
            ],
            "description": "addPolicyTag"
        },
        {
            "path": "/policy/tag/association",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "addPolicyTagAssociation",
                    "nickname": "addPolicyTagAssociation",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.",
                            "code": 201
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The request was accepted for processing, but the processing has not been completed.",
                            "code": 202
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "POST",
                    "consumes": [
                        "application/json"
                    ],
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Add a policy tag to network devices.",
                    "parameters": [
                        {
                            "type": "PolicyTagAssociationDTO",
                            "name": "policyTagAssociationDTO",
                            "allowMultiple": false,
                            "required": false,
                            "description": "policyTagAssociationDTO",
                            "defaultValue": "",
                            "paramType": "body"
                        }
                    ]
                }
            ],
            "description": "addPolicyTagAssociation"
        },
        {
            "path": "/policy/tag/association",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "deletePolicyTagAssociation",
                    "nickname": "deletePolicyTagAssociation",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "DELETE",
                    "consumes": [
                        "application/json"
                    ],
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Remove a policy tag from network device.",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyTag",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Policy Tag",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "networkDeviceId",
                            "allowMultiple": false,
                            "required": true,
                            "description": "NetworkDeviceId",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "deletePolicyTagAssociation"
        },
        {
            "path": "/policy/tag/association",
            "operations": [
                {
                    "type": "PolicyTagAssociationListResult",
                    "notes": "getPolicyTagAssociation",
                    "nickname": "getPolicyTagAssociation",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "PolicyTagAssociationListResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves network device ids that have the policy tag",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyTag",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Policy Tag",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "networkDeviceId",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Network device Id",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "networkDevices+restricted",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Restricted Flag",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "offset",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Starting index of the resources (1 based)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "limit",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Number of resources to return",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getPolicyTagAssociation"
        },
        {
            "path": "/policy/tag/association/network-device",
            "operations": [
                {
                    "type": "PolicyTagAssociationDeviceListResult",
                    "notes": "Retrieves network devices in policy tags based on filters.",
                    "nickname": "getPolicyTagAssociationNetworkDevices",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "PolicyTagAssociationDeviceListResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves network devices in policy tags based on filters.",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "unAssigned",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Boolean to indicate if the device is currently not assigned to any policy tag. If empty, both assigned and unAssigned devices will be returned.",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "restricted",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Boolean to indicate if the user has restricted access to the device. If empty, devices with both restricted and unrestricted access will be returned.",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "deviceName",
                            "allowMultiple": false,
                            "required": false,
                            "description": "The name of the device.",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "locationName",
                            "allowMultiple": false,
                            "required": false,
                            "description": "The location name of the device.",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "deviceIp",
                            "allowMultiple": false,
                            "required": false,
                            "description": "The ip address of the device.",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "filterOperation",
                            "allowMultiple": false,
                            "required": false,
                            "description": "The filter operation for the query parameters (startsWith, contains, endsWith). If filterOperation is not provided, then it is an exact match.",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "offset",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Starting index of the resources (1 based).",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "limit",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Number of resources to return. Maximum limit is 500.",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getPolicyTagAssociationNetworkDevices"
        },
        {
            "path": "/policy/tag/association/network-device/count",
            "operations": [
                {
                    "type": "CountResult",
                    "notes": "Retrieves the number of network devices in policy tags based on filters.",
                    "nickname": "getPolicyTagAssociationNetworkDevicesCount",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "CountResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves the number of network devices in policy tags based on filters.",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "unAssigned",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Boolean to indicate if the device is currently not assigned to any policy tag. If empty count of both assigned and unAssigned devices will be returned.",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "restricted",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Boolean to indicate if the user has restricted access to the device. If empty, count of devices with both restricted and unrestricted access will be returned.",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "deviceName",
                            "allowMultiple": false,
                            "required": false,
                            "description": "The name of the device.",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "locationName",
                            "allowMultiple": false,
                            "required": false,
                            "description": "The location name of the device.",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "deviceIp",
                            "allowMultiple": false,
                            "required": false,
                            "description": "The ip address of the device.",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "filterOperation",
                            "allowMultiple": false,
                            "required": false,
                            "description": "The filter operation for the query parameters (startsWith, contains, endsWith). If filterOperation is not provided, then it is an exact match.",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getPolicyTagAssociationNetworkDevicesCount"
        },
        {
            "path": "/policy/tag/count",
            "operations": [
                {
                    "type": "CountResult",
                    "notes": "getPolicyTagsCount",
                    "nickname": "getPolicyTagsCount",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "CountResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves the number of policy tags",
                    "parameters": []
                }
            ],
            "description": "getPolicyTagsCount"
        },
        {
            "path": "/policy/version",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "Delete policies history based on a given filter",
                    "nickname": "deleteFilterPoliciesHistory",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "DELETE",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Delete policies history based on a given filter",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Delete policies history for a given scope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scopeWirelessSegment",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Delete policies history for a given wireless segment, within a policyScope (policyScope is mandatory for this)",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "deleteFilterPoliciesHistory"
        },
        {
            "path": "/policy/version",
            "operations": [
                {
                    "type": "PolicyVersionNumberListResult",
                    "notes": "Retrieves the policy version numbers. The first element in the list is the current version. The versions are in descending order.",
                    "nickname": "getPolicyVersionNumbers",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "PolicyVersionNumberListResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves the policy version numbers.",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve policy version numbers for the given scope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scopeWirelessSegment",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve policy version numbers for the given scopeWirelessSegment",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "offset",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Starting index of the resources (1 based)",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "limit",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Number of resources to return",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getPolicyVersionNumbers"
        },
        {
            "path": "/policy/version/count",
            "operations": [
                {
                    "type": "CountResult",
                    "notes": "Retrieves the count of policy version numbers.",
                    "nickname": "getPolicyVersionNumbersCount",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "CountResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves the count of policy version numbers.",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "policyScope",
                            "allowMultiple": false,
                            "required": true,
                            "description": "Retrieve the count of policy version numbers for the given scope",
                            "defaultValue": "",
                            "paramType": "query"
                        },
                        {
                            "type": "string",
                            "name": "scopeWirelessSegment",
                            "allowMultiple": false,
                            "required": false,
                            "description": "Retrieve the count of policy version numbers for the given scopeWirelessSegment",
                            "defaultValue": "",
                            "paramType": "query"
                        }
                    ]
                }
            ],
            "description": "getPolicyVersionNumbersCount"
        },
        {
            "path": "/policy/{id}",
            "operations": [
                {
                    "type": "PolicyResult",
                    "notes": "Get a policy by id",
                    "nickname": "get",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "PolicyResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "GET",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Retrieves a policy based on its id",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "id",
                            "allowMultiple": false,
                            "required": true,
                            "description": "id",
                            "defaultValue": "",
                            "paramType": "path"
                        }
                    ]
                }
            ],
            "description": "get"
        },
        {
            "path": "/policy/{id}",
            "operations": [
                {
                    "type": "TaskIdResult",
                    "notes": "Delete a policy by id",
                    "nickname": "delete",
                    "responseMessages": [
                        {
                            "message": "The request was successful, however no content was returned.",
                            "code": 204
                        },
                        {
                            "message": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.",
                            "code": 409
                        },
                        {
                            "message": "The GET request included a Range Header, and the server responded with the partial content matching the range.",
                            "code": 206
                        },
                        {
                            "message": "The server did not respond inside time restrictions and timed-out.",
                            "code": 504
                        },
                        {
                            "message": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).",
                            "code": 415
                        },
                        {
                            "message": "The request was successful. The result is contained in the response body.",
                            "code": 200,
                            "responseModel": "TaskIdResult"
                        },
                        {
                            "message": "The server could not fulfill the request.",
                            "code": 500
                        },
                        {
                            "message": "The server has not implemented the functionality required to fulfill the request.",
                            "code": 501
                        },
                        {
                            "message": "The server recognizes the authentication credentials, but the client is not authorized to perform this request.",
                            "code": 403
                        },
                        {
                            "message": "The client made a request that the server could not understand (for example, the request syntax is incorrect).",
                            "code": 400
                        },
                        {
                            "message": "The server is (temporarily) unavailable.",
                            "code": 503
                        },
                        {
                            "message": "The client's authentication credentials included with the request are missing or invalid.",
                            "code": 401
                        },
                        {
                            "message": "The client made a request for a resource that does not exist.",
                            "code": 404
                        }
                    ],
                    "method": "DELETE",
                    "deprecated": "false",
                    "produces": [
                        "application/json"
                    ],
                    "summary": "Deletes a policy by its id",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "id",
                            "allowMultiple": false,
                            "required": true,
                            "description": "id",
                            "defaultValue": "",
                            "paramType": "path"
                        }
                    ]
                }
            ],
            "description": "delete"
        }
    ],
    "resourcePath": "/policy",
    "produces": [
        "application/json"
    ],
    "apiVersion": "1.0"
}